/**
 * Generated by orval v7.13.1 üç∫
 * Do not edit manually.
 * Maintenance Service API
 * API documentation for the Asset Service
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { axiosInstance } from '../axiosInstance';
export type OrderRequestStatus = typeof OrderRequestStatus[keyof typeof OrderRequestStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderRequestStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
} as const;

export interface OrderRequest {
  /**
   * @minLength 0
   * @maxLength 255
   */
  assetId: string;
  /** @minLength 1 */
  description: string;
  status: OrderRequestStatus;
  /**
   * @minimum 1
   * @maximum 5
   */
  priority: number;
}

export interface ErrorResponse {
  status?: number;
  error?: string;
  message?: string;
  data?: unknown;
  timestamp?: string;
}

export type AssetResponseType = typeof AssetResponseType[keyof typeof AssetResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AssetResponseType = {
  SHIP: 'SHIP',
  SUBMARINE: 'SUBMARINE',
  AIRCRAFT: 'AIRCRAFT',
  DRONE: 'DRONE',
  GROUND_VEHICLE: 'GROUND_VEHICLE',
} as const;

export type AssetResponseStatus = typeof AssetResponseStatus[keyof typeof AssetResponseStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AssetResponseStatus = {
  ACTIVE: 'ACTIVE',
  MAINTENANCE: 'MAINTENANCE',
  INACTIVE: 'INACTIVE',
} as const;

export interface AssetResponse {
  id?: string;
  name?: string;
  type?: AssetResponseType;
  status?: AssetResponseStatus;
  longitude?: number;
  latitude?: number;
  createdAt?: string;
  updatedAt?: string;
}

export type OrderResponseStatus = typeof OrderResponseStatus[keyof typeof OrderResponseStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderResponseStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
} as const;

export interface OrderResponse {
  id?: number;
  asset?: AssetResponse;
  description?: string;
  status?: OrderResponseStatus;
  priority?: number;
  placedBy?: User;
  completedBy?: User;
  createdAt?: string;
  updatedAt?: string;
}

export interface User {
  id?: string;
  username?: string;
  email?: string;
  firstName?: string;
  lastName?: string;
  enabled?: boolean;
  createdTimestamp?: number;
  roles?: string[];
}

export interface OrderNoteRequest {
  /** @minLength 1 */
  note: string;
}

export interface OrderNoteResponse {
  id?: number;
  orderId?: number;
  note?: string;
  createdBy?: User;
  createdAt?: string;
}

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Get a maintenance order by ID
 */
export const getOrderById = (
    id: number,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<OrderResponse>(
      {url: `/api/maintenance/orders/${id}`, method: 'GET', signal
    },
      options);
    }
  



export const getGetOrderByIdQueryKey = (id?: number,) => {
    return [
    `/api/maintenance/orders/${id}`
    ] as const;
    }

    
export const getGetOrderByIdQueryOptions = <TData = Awaited<ReturnType<typeof getOrderById>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderById>>> = ({ signal }) => getOrderById(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOrderByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderById>>>
export type GetOrderByIdQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useGetOrderById<TData = Awaited<ReturnType<typeof getOrderById>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderById>>,
          TError,
          Awaited<ReturnType<typeof getOrderById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrderById<TData = Awaited<ReturnType<typeof getOrderById>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderById>>,
          TError,
          Awaited<ReturnType<typeof getOrderById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrderById<TData = Awaited<ReturnType<typeof getOrderById>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get a maintenance order by ID
 */

export function useGetOrderById<TData = Awaited<ReturnType<typeof getOrderById>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetOrderByIdQueryOptions(id,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update a maintenance order by ID
 */
export const updateOrder = (
    id: number,
    orderRequest: OrderRequest,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<OrderResponse>(
      {url: `/api/maintenance/orders/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: orderRequest
    },
      options);
    }
  


export const getUpdateOrderMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOrder>>, TError,{id: number;data: OrderRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateOrder>>, TError,{id: number;data: OrderRequest}, TContext> => {

const mutationKey = ['updateOrder'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateOrder>>, {id: number;data: OrderRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  updateOrder(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateOrderMutationResult = NonNullable<Awaited<ReturnType<typeof updateOrder>>>
    export type UpdateOrderMutationBody = OrderRequest
    export type UpdateOrderMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Update a maintenance order by ID
 */
export const useUpdateOrder = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOrder>>, TError,{id: number;data: OrderRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateOrder>>,
        TError,
        {id: number;data: OrderRequest},
        TContext
      > => {

      const mutationOptions = getUpdateOrderMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary Delete a maintenance order by ID
 */
export const deleteOrder = (
    id: number,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/maintenance/orders/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteOrderMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrder>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteOrder>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteOrder'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOrder>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteOrder(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteOrderMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOrder>>>
    
    export type DeleteOrderMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Delete a maintenance order by ID
 */
export const useDeleteOrder = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrder>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteOrder>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteOrderMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary Get a list of all maintenance orders
 */
export const getAllOrders = (
    
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<OrderResponse[]>(
      {url: `/api/maintenance/orders`, method: 'GET', signal
    },
      options);
    }
  



export const getGetAllOrdersQueryKey = () => {
    return [
    `/api/maintenance/orders`
    ] as const;
    }

    
export const getGetAllOrdersQueryOptions = <TData = Awaited<ReturnType<typeof getAllOrders>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllOrders>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllOrdersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllOrders>>> = ({ signal }) => getAllOrders(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllOrders>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllOrdersQueryResult = NonNullable<Awaited<ReturnType<typeof getAllOrders>>>
export type GetAllOrdersQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useGetAllOrders<TData = Awaited<ReturnType<typeof getAllOrders>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllOrders>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllOrders>>,
          TError,
          Awaited<ReturnType<typeof getAllOrders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllOrders<TData = Awaited<ReturnType<typeof getAllOrders>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllOrders>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllOrders>>,
          TError,
          Awaited<ReturnType<typeof getAllOrders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllOrders<TData = Awaited<ReturnType<typeof getAllOrders>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllOrders>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get a list of all maintenance orders
 */

export function useGetAllOrders<TData = Awaited<ReturnType<typeof getAllOrders>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllOrders>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllOrdersQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new maintenance order
 */
export const createOrder = (
    orderRequest: OrderRequest,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<OrderResponse>(
      {url: `/api/maintenance/orders`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderRequest, signal
    },
      options);
    }
  


export const getCreateOrderMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrder>>, TError,{data: OrderRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createOrder>>, TError,{data: OrderRequest}, TContext> => {

const mutationKey = ['createOrder'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createOrder>>, {data: OrderRequest}> = (props) => {
          const {data} = props ?? {};

          return  createOrder(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateOrderMutationResult = NonNullable<Awaited<ReturnType<typeof createOrder>>>
    export type CreateOrderMutationBody = OrderRequest
    export type CreateOrderMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Create a new maintenance order
 */
export const useCreateOrder = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrder>>, TError,{data: OrderRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createOrder>>,
        TError,
        {data: OrderRequest},
        TContext
      > => {

      const mutationOptions = getCreateOrderMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary Get all notes for a maintenance order
 */
export const getNotes = (
    orderId: number,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<OrderNoteResponse[]>(
      {url: `/api/maintenance/orders/${orderId}/notes`, method: 'GET', signal
    },
      options);
    }
  



export const getGetNotesQueryKey = (orderId?: number,) => {
    return [
    `/api/maintenance/orders/${orderId}/notes`
    ] as const;
    }

    
export const getGetNotesQueryOptions = <TData = Awaited<ReturnType<typeof getNotes>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotes>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNotesQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotes>>> = ({ signal }) => getNotes(orderId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNotes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetNotesQueryResult = NonNullable<Awaited<ReturnType<typeof getNotes>>>
export type GetNotesQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useGetNotes<TData = Awaited<ReturnType<typeof getNotes>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 orderId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotes>>,
          TError,
          Awaited<ReturnType<typeof getNotes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetNotes<TData = Awaited<ReturnType<typeof getNotes>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotes>>,
          TError,
          Awaited<ReturnType<typeof getNotes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetNotes<TData = Awaited<ReturnType<typeof getNotes>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotes>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all notes for a maintenance order
 */

export function useGetNotes<TData = Awaited<ReturnType<typeof getNotes>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotes>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetNotesQueryOptions(orderId,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Add a note to a maintenance order
 */
export const addNote = (
    orderId: number,
    orderNoteRequest: OrderNoteRequest,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<OrderNoteResponse>(
      {url: `/api/maintenance/orders/${orderId}/notes`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderNoteRequest, signal
    },
      options);
    }
  


export const getAddNoteMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addNote>>, TError,{orderId: number;data: OrderNoteRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof addNote>>, TError,{orderId: number;data: OrderNoteRequest}, TContext> => {

const mutationKey = ['addNote'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addNote>>, {orderId: number;data: OrderNoteRequest}> = (props) => {
          const {orderId,data} = props ?? {};

          return  addNote(orderId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddNoteMutationResult = NonNullable<Awaited<ReturnType<typeof addNote>>>
    export type AddNoteMutationBody = OrderNoteRequest
    export type AddNoteMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Add a note to a maintenance order
 */
export const useAddNote = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addNote>>, TError,{orderId: number;data: OrderNoteRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof addNote>>,
        TError,
        {orderId: number;data: OrderNoteRequest},
        TContext
      > => {

      const mutationOptions = getAddNoteMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary Delete a note from a maintenance order
 */
export const deleteNote = (
    orderId: number,
    noteId: number,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/maintenance/orders/${orderId}/notes/${noteId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteNoteMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteNote>>, TError,{orderId: number;noteId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteNote>>, TError,{orderId: number;noteId: number}, TContext> => {

const mutationKey = ['deleteNote'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteNote>>, {orderId: number;noteId: number}> = (props) => {
          const {orderId,noteId} = props ?? {};

          return  deleteNote(orderId,noteId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteNoteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteNote>>>
    
    export type DeleteNoteMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Delete a note from a maintenance order
 */
export const useDeleteNote = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteNote>>, TError,{orderId: number;noteId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteNote>>,
        TError,
        {orderId: number;noteId: number},
        TContext
      > => {

      const mutationOptions = getDeleteNoteMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
