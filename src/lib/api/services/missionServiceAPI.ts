/**
 * Generated by orval v7.13.1 üç∫
 * Do not edit manually.
 * Mission Service API
 * API documentation for the Mission Service
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { axiosInstance } from '../axiosInstance';
export type MissionRequestStatus = typeof MissionRequestStatus[keyof typeof MissionRequestStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MissionRequestStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
} as const;

export interface MissionRequest {
  /** @minLength 1 */
  name: string;
  description?: string;
  /**
   * @minimum 1
   * @maximum 5
   */
  priority: number;
  startDate: string;
  endDate?: string;
  status: MissionRequestStatus;
}

export interface ErrorResponse {
  status?: number;
  error?: string;
  message?: string;
  data?: unknown;
  timestamp?: string;
}

export interface MissionResponse {
  id?: number;
  name?: string;
  description?: string;
  priority?: number;
  startDate?: string;
  endDate?: string;
  status?: string;
  createdBy?: User;
  createdAt?: string;
  updatedAt?: string;
}

export interface User {
  id?: string;
  username?: string;
  email?: string;
  firstName?: string;
  lastName?: string;
  enabled?: boolean;
  createdTimestamp?: number;
  roles?: string[];
}

export interface MissionLogRequest {
  /** @minLength 1 */
  entry: string;
}

export interface MissionLogResponse {
  id?: number;
  missionId?: number;
  createdBy?: User;
  entry?: string;
  timestamp?: string;
}

export type AssetResponseType = typeof AssetResponseType[keyof typeof AssetResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AssetResponseType = {
  SHIP: 'SHIP',
  SUBMARINE: 'SUBMARINE',
  AIRCRAFT: 'AIRCRAFT',
  DRONE: 'DRONE',
  GROUND_VEHICLE: 'GROUND_VEHICLE',
} as const;

export type AssetResponseStatus = typeof AssetResponseStatus[keyof typeof AssetResponseStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AssetResponseStatus = {
  ACTIVE: 'ACTIVE',
  MAINTENANCE: 'MAINTENANCE',
  INACTIVE: 'INACTIVE',
} as const;

export interface AssetResponse {
  id?: string;
  name?: string;
  type?: AssetResponseType;
  status?: AssetResponseStatus;
  longitude?: number;
  latitude?: number;
  createdAt?: string;
  updatedAt?: string;
}

export type AssignMissionToUserParams = {
missionId: number;
userId: string;
};

export type UnassignMissionFromUserParams = {
missionId: number;
userId: string;
};

export type AssignAssetToMissionParams = {
assetId: string;
missionId: number;
};

export type UnassignAssetFromMissionParams = {
assetId: string;
missionId: number;
};

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Get a mission by ID
 */
export const getMissionById = (
    id: number,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<MissionResponse>(
      {url: `/api/missions/${id}`, method: 'GET', signal
    },
      options);
    }
  



export const getGetMissionByIdQueryKey = (id?: number,) => {
    return [
    `/api/missions/${id}`
    ] as const;
    }

    
export const getGetMissionByIdQueryOptions = <TData = Awaited<ReturnType<typeof getMissionById>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMissionById>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMissionByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMissionById>>> = ({ signal }) => getMissionById(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMissionById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMissionByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMissionById>>>
export type GetMissionByIdQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useGetMissionById<TData = Awaited<ReturnType<typeof getMissionById>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMissionById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMissionById>>,
          TError,
          Awaited<ReturnType<typeof getMissionById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMissionById<TData = Awaited<ReturnType<typeof getMissionById>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMissionById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMissionById>>,
          TError,
          Awaited<ReturnType<typeof getMissionById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMissionById<TData = Awaited<ReturnType<typeof getMissionById>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMissionById>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get a mission by ID
 */

export function useGetMissionById<TData = Awaited<ReturnType<typeof getMissionById>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMissionById>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMissionByIdQueryOptions(id,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update an existing mission
 */
export const updateMission = (
    id: number,
    missionRequest: MissionRequest,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<MissionResponse>(
      {url: `/api/missions/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: missionRequest
    },
      options);
    }
  


export const getUpdateMissionMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMission>>, TError,{id: number;data: MissionRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateMission>>, TError,{id: number;data: MissionRequest}, TContext> => {

const mutationKey = ['updateMission'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateMission>>, {id: number;data: MissionRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  updateMission(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateMissionMutationResult = NonNullable<Awaited<ReturnType<typeof updateMission>>>
    export type UpdateMissionMutationBody = MissionRequest
    export type UpdateMissionMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Update an existing mission
 */
export const useUpdateMission = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMission>>, TError,{id: number;data: MissionRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateMission>>,
        TError,
        {id: number;data: MissionRequest},
        TContext
      > => {

      const mutationOptions = getUpdateMissionMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary Delete a mission by ID
 */
export const deleteMission = (
    id: number,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/missions/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMissionMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMission>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMission>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteMission'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMission>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteMission(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMissionMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMission>>>
    
    export type DeleteMissionMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Delete a mission by ID
 */
export const useDeleteMission = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMission>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteMission>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteMissionMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary Get all missions
 */
export const getAllMissions = (
    
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<MissionResponse[]>(
      {url: `/api/missions`, method: 'GET', signal
    },
      options);
    }
  



export const getGetAllMissionsQueryKey = () => {
    return [
    `/api/missions`
    ] as const;
    }

    
export const getGetAllMissionsQueryOptions = <TData = Awaited<ReturnType<typeof getAllMissions>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMissions>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllMissionsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllMissions>>> = ({ signal }) => getAllMissions(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllMissions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllMissionsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllMissions>>>
export type GetAllMissionsQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useGetAllMissions<TData = Awaited<ReturnType<typeof getAllMissions>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMissions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllMissions>>,
          TError,
          Awaited<ReturnType<typeof getAllMissions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllMissions<TData = Awaited<ReturnType<typeof getAllMissions>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMissions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllMissions>>,
          TError,
          Awaited<ReturnType<typeof getAllMissions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllMissions<TData = Awaited<ReturnType<typeof getAllMissions>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMissions>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all missions
 */

export function useGetAllMissions<TData = Awaited<ReturnType<typeof getAllMissions>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMissions>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllMissionsQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new mission
 */
export const createMission = (
    missionRequest: MissionRequest,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<MissionResponse>(
      {url: `/api/missions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: missionRequest, signal
    },
      options);
    }
  


export const getCreateMissionMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createMission>>, TError,{data: MissionRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createMission>>, TError,{data: MissionRequest}, TContext> => {

const mutationKey = ['createMission'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createMission>>, {data: MissionRequest}> = (props) => {
          const {data} = props ?? {};

          return  createMission(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateMissionMutationResult = NonNullable<Awaited<ReturnType<typeof createMission>>>
    export type CreateMissionMutationBody = MissionRequest
    export type CreateMissionMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Create a new mission
 */
export const useCreateMission = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createMission>>, TError,{data: MissionRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createMission>>,
        TError,
        {data: MissionRequest},
        TContext
      > => {

      const mutationOptions = getCreateMissionMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary Get all mission logs for a specific mission, sorted by timestamp descending
 */
export const getMissionLogsForMission = (
    missionId: number,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<MissionLogResponse[]>(
      {url: `/api/missions/${missionId}/logs`, method: 'GET', signal
    },
      options);
    }
  



export const getGetMissionLogsForMissionQueryKey = (missionId?: number,) => {
    return [
    `/api/missions/${missionId}/logs`
    ] as const;
    }

    
export const getGetMissionLogsForMissionQueryOptions = <TData = Awaited<ReturnType<typeof getMissionLogsForMission>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(missionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMissionLogsForMission>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMissionLogsForMissionQueryKey(missionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMissionLogsForMission>>> = ({ signal }) => getMissionLogsForMission(missionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(missionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMissionLogsForMission>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMissionLogsForMissionQueryResult = NonNullable<Awaited<ReturnType<typeof getMissionLogsForMission>>>
export type GetMissionLogsForMissionQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useGetMissionLogsForMission<TData = Awaited<ReturnType<typeof getMissionLogsForMission>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 missionId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMissionLogsForMission>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMissionLogsForMission>>,
          TError,
          Awaited<ReturnType<typeof getMissionLogsForMission>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMissionLogsForMission<TData = Awaited<ReturnType<typeof getMissionLogsForMission>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 missionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMissionLogsForMission>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMissionLogsForMission>>,
          TError,
          Awaited<ReturnType<typeof getMissionLogsForMission>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMissionLogsForMission<TData = Awaited<ReturnType<typeof getMissionLogsForMission>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 missionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMissionLogsForMission>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all mission logs for a specific mission, sorted by timestamp descending
 */

export function useGetMissionLogsForMission<TData = Awaited<ReturnType<typeof getMissionLogsForMission>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 missionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMissionLogsForMission>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMissionLogsForMissionQueryOptions(missionId,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new mission log for a specific mission
 */
export const createMissionLog = (
    missionId: number,
    missionLogRequest: MissionLogRequest,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<MissionLogResponse>(
      {url: `/api/missions/${missionId}/logs`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: missionLogRequest, signal
    },
      options);
    }
  


export const getCreateMissionLogMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createMissionLog>>, TError,{missionId: number;data: MissionLogRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createMissionLog>>, TError,{missionId: number;data: MissionLogRequest}, TContext> => {

const mutationKey = ['createMissionLog'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createMissionLog>>, {missionId: number;data: MissionLogRequest}> = (props) => {
          const {missionId,data} = props ?? {};

          return  createMissionLog(missionId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateMissionLogMutationResult = NonNullable<Awaited<ReturnType<typeof createMissionLog>>>
    export type CreateMissionLogMutationBody = MissionLogRequest
    export type CreateMissionLogMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Create a new mission log for a specific mission
 */
export const useCreateMissionLog = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createMissionLog>>, TError,{missionId: number;data: MissionLogRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createMissionLog>>,
        TError,
        {missionId: number;data: MissionLogRequest},
        TContext
      > => {

      const mutationOptions = getCreateMissionLogMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary Get all missions assigned to the user making the request
 */
export const getAllAssignedMissions = (
    
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<MissionResponse[]>(
      {url: `/api/missions/assigned-missions`, method: 'GET', signal
    },
      options);
    }
  



export const getGetAllAssignedMissionsQueryKey = () => {
    return [
    `/api/missions/assigned-missions`
    ] as const;
    }

    
export const getGetAllAssignedMissionsQueryOptions = <TData = Awaited<ReturnType<typeof getAllAssignedMissions>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAssignedMissions>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllAssignedMissionsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllAssignedMissions>>> = ({ signal }) => getAllAssignedMissions(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllAssignedMissions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllAssignedMissionsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllAssignedMissions>>>
export type GetAllAssignedMissionsQueryError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse


export function useGetAllAssignedMissions<TData = Awaited<ReturnType<typeof getAllAssignedMissions>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAssignedMissions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllAssignedMissions>>,
          TError,
          Awaited<ReturnType<typeof getAllAssignedMissions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllAssignedMissions<TData = Awaited<ReturnType<typeof getAllAssignedMissions>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAssignedMissions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllAssignedMissions>>,
          TError,
          Awaited<ReturnType<typeof getAllAssignedMissions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllAssignedMissions<TData = Awaited<ReturnType<typeof getAllAssignedMissions>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAssignedMissions>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all missions assigned to the user making the request
 */

export function useGetAllAssignedMissions<TData = Awaited<ReturnType<typeof getAllAssignedMissions>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAssignedMissions>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllAssignedMissionsQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Assign a mission to a user
 */
export const assignMissionToUser = (
    params: AssignMissionToUserParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/missions/assigned-missions`, method: 'POST',
        params, signal
    },
      options);
    }
  


export const getAssignMissionToUserMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof assignMissionToUser>>, TError,{params: AssignMissionToUserParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof assignMissionToUser>>, TError,{params: AssignMissionToUserParams}, TContext> => {

const mutationKey = ['assignMissionToUser'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof assignMissionToUser>>, {params: AssignMissionToUserParams}> = (props) => {
          const {params} = props ?? {};

          return  assignMissionToUser(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AssignMissionToUserMutationResult = NonNullable<Awaited<ReturnType<typeof assignMissionToUser>>>
    
    export type AssignMissionToUserMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Assign a mission to a user
 */
export const useAssignMissionToUser = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof assignMissionToUser>>, TError,{params: AssignMissionToUserParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof assignMissionToUser>>,
        TError,
        {params: AssignMissionToUserParams},
        TContext
      > => {

      const mutationOptions = getAssignMissionToUserMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary Unassign a mission from a user
 */
export const unassignMissionFromUser = (
    params: UnassignMissionFromUserParams,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/missions/assigned-missions`, method: 'DELETE',
        params
    },
      options);
    }
  


export const getUnassignMissionFromUserMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof unassignMissionFromUser>>, TError,{params: UnassignMissionFromUserParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof unassignMissionFromUser>>, TError,{params: UnassignMissionFromUserParams}, TContext> => {

const mutationKey = ['unassignMissionFromUser'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof unassignMissionFromUser>>, {params: UnassignMissionFromUserParams}> = (props) => {
          const {params} = props ?? {};

          return  unassignMissionFromUser(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UnassignMissionFromUserMutationResult = NonNullable<Awaited<ReturnType<typeof unassignMissionFromUser>>>
    
    export type UnassignMissionFromUserMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Unassign a mission from a user
 */
export const useUnassignMissionFromUser = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof unassignMissionFromUser>>, TError,{params: UnassignMissionFromUserParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof unassignMissionFromUser>>,
        TError,
        {params: UnassignMissionFromUserParams},
        TContext
      > => {

      const mutationOptions = getUnassignMissionFromUserMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary Assign an asset to a mission
 */
export const assignAssetToMission = (
    params: AssignAssetToMissionParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/api/missions/assigned-assets`, method: 'POST',
        params, signal
    },
      options);
    }
  


export const getAssignAssetToMissionMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof assignAssetToMission>>, TError,{params: AssignAssetToMissionParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof assignAssetToMission>>, TError,{params: AssignAssetToMissionParams}, TContext> => {

const mutationKey = ['assignAssetToMission'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof assignAssetToMission>>, {params: AssignAssetToMissionParams}> = (props) => {
          const {params} = props ?? {};

          return  assignAssetToMission(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AssignAssetToMissionMutationResult = NonNullable<Awaited<ReturnType<typeof assignAssetToMission>>>
    
    export type AssignAssetToMissionMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Assign an asset to a mission
 */
export const useAssignAssetToMission = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof assignAssetToMission>>, TError,{params: AssignAssetToMissionParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof assignAssetToMission>>,
        TError,
        {params: AssignAssetToMissionParams},
        TContext
      > => {

      const mutationOptions = getAssignAssetToMissionMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary Unassign an asset from a mission
 */
export const unassignAssetFromMission = (
    params: UnassignAssetFromMissionParams,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/missions/assigned-assets`, method: 'DELETE',
        params
    },
      options);
    }
  


export const getUnassignAssetFromMissionMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof unassignAssetFromMission>>, TError,{params: UnassignAssetFromMissionParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof unassignAssetFromMission>>, TError,{params: UnassignAssetFromMissionParams}, TContext> => {

const mutationKey = ['unassignAssetFromMission'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof unassignAssetFromMission>>, {params: UnassignAssetFromMissionParams}> = (props) => {
          const {params} = props ?? {};

          return  unassignAssetFromMission(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UnassignAssetFromMissionMutationResult = NonNullable<Awaited<ReturnType<typeof unassignAssetFromMission>>>
    
    export type UnassignAssetFromMissionMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Unassign an asset from a mission
 */
export const useUnassignAssetFromMission = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof unassignAssetFromMission>>, TError,{params: UnassignAssetFromMissionParams}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof unassignAssetFromMission>>,
        TError,
        {params: UnassignAssetFromMissionParams},
        TContext
      > => {

      const mutationOptions = getUnassignAssetFromMissionMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary Get all users assigned to a specific mission
 */
export const getUsersAssignedToMission = (
    missionId: number,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<User[]>(
      {url: `/api/missions/assigned-missions/users/${missionId}`, method: 'GET', signal
    },
      options);
    }
  



export const getGetUsersAssignedToMissionQueryKey = (missionId?: number,) => {
    return [
    `/api/missions/assigned-missions/users/${missionId}`
    ] as const;
    }

    
export const getGetUsersAssignedToMissionQueryOptions = <TData = Awaited<ReturnType<typeof getUsersAssignedToMission>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(missionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersAssignedToMission>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersAssignedToMissionQueryKey(missionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersAssignedToMission>>> = ({ signal }) => getUsersAssignedToMission(missionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(missionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsersAssignedToMission>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUsersAssignedToMissionQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersAssignedToMission>>>
export type GetUsersAssignedToMissionQueryError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse


export function useGetUsersAssignedToMission<TData = Awaited<ReturnType<typeof getUsersAssignedToMission>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 missionId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersAssignedToMission>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersAssignedToMission>>,
          TError,
          Awaited<ReturnType<typeof getUsersAssignedToMission>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersAssignedToMission<TData = Awaited<ReturnType<typeof getUsersAssignedToMission>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 missionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersAssignedToMission>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersAssignedToMission>>,
          TError,
          Awaited<ReturnType<typeof getUsersAssignedToMission>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersAssignedToMission<TData = Awaited<ReturnType<typeof getUsersAssignedToMission>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 missionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersAssignedToMission>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all users assigned to a specific mission
 */

export function useGetUsersAssignedToMission<TData = Awaited<ReturnType<typeof getUsersAssignedToMission>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 missionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersAssignedToMission>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUsersAssignedToMissionQueryOptions(missionId,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get all missions assigned to a specific user
 */
export const getMissionsAssignedToUser = (
    userId: string,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<MissionResponse[]>(
      {url: `/api/missions/assigned-missions/missions/${userId}`, method: 'GET', signal
    },
      options);
    }
  



export const getGetMissionsAssignedToUserQueryKey = (userId?: string,) => {
    return [
    `/api/missions/assigned-missions/missions/${userId}`
    ] as const;
    }

    
export const getGetMissionsAssignedToUserQueryOptions = <TData = Awaited<ReturnType<typeof getMissionsAssignedToUser>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMissionsAssignedToUser>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMissionsAssignedToUserQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMissionsAssignedToUser>>> = ({ signal }) => getMissionsAssignedToUser(userId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMissionsAssignedToUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMissionsAssignedToUserQueryResult = NonNullable<Awaited<ReturnType<typeof getMissionsAssignedToUser>>>
export type GetMissionsAssignedToUserQueryError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse


export function useGetMissionsAssignedToUser<TData = Awaited<ReturnType<typeof getMissionsAssignedToUser>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 userId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMissionsAssignedToUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMissionsAssignedToUser>>,
          TError,
          Awaited<ReturnType<typeof getMissionsAssignedToUser>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMissionsAssignedToUser<TData = Awaited<ReturnType<typeof getMissionsAssignedToUser>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMissionsAssignedToUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMissionsAssignedToUser>>,
          TError,
          Awaited<ReturnType<typeof getMissionsAssignedToUser>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMissionsAssignedToUser<TData = Awaited<ReturnType<typeof getMissionsAssignedToUser>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMissionsAssignedToUser>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all missions assigned to a specific user
 */

export function useGetMissionsAssignedToUser<TData = Awaited<ReturnType<typeof getMissionsAssignedToUser>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMissionsAssignedToUser>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMissionsAssignedToUserQueryOptions(userId,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get all missions assigned to a specific asset
 */
export const getAssignedMissionsByAssetId = (
    assetId: string,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<MissionResponse[]>(
      {url: `/api/missions/assigned-assets/missions/${assetId}`, method: 'GET', signal
    },
      options);
    }
  



export const getGetAssignedMissionsByAssetIdQueryKey = (assetId?: string,) => {
    return [
    `/api/missions/assigned-assets/missions/${assetId}`
    ] as const;
    }

    
export const getGetAssignedMissionsByAssetIdQueryOptions = <TData = Awaited<ReturnType<typeof getAssignedMissionsByAssetId>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(assetId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssignedMissionsByAssetId>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAssignedMissionsByAssetIdQueryKey(assetId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssignedMissionsByAssetId>>> = ({ signal }) => getAssignedMissionsByAssetId(assetId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(assetId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAssignedMissionsByAssetId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAssignedMissionsByAssetIdQueryResult = NonNullable<Awaited<ReturnType<typeof getAssignedMissionsByAssetId>>>
export type GetAssignedMissionsByAssetIdQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useGetAssignedMissionsByAssetId<TData = Awaited<ReturnType<typeof getAssignedMissionsByAssetId>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 assetId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssignedMissionsByAssetId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssignedMissionsByAssetId>>,
          TError,
          Awaited<ReturnType<typeof getAssignedMissionsByAssetId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAssignedMissionsByAssetId<TData = Awaited<ReturnType<typeof getAssignedMissionsByAssetId>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 assetId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssignedMissionsByAssetId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssignedMissionsByAssetId>>,
          TError,
          Awaited<ReturnType<typeof getAssignedMissionsByAssetId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAssignedMissionsByAssetId<TData = Awaited<ReturnType<typeof getAssignedMissionsByAssetId>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 assetId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssignedMissionsByAssetId>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all missions assigned to a specific asset
 */

export function useGetAssignedMissionsByAssetId<TData = Awaited<ReturnType<typeof getAssignedMissionsByAssetId>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 assetId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssignedMissionsByAssetId>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAssignedMissionsByAssetIdQueryOptions(assetId,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get all assets assigned to a specific mission
 */
export const getAssignedAssetsByMissionId = (
    missionId: number,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<AssetResponse[]>(
      {url: `/api/missions/assigned-assets/assets/${missionId}`, method: 'GET', signal
    },
      options);
    }
  



export const getGetAssignedAssetsByMissionIdQueryKey = (missionId?: number,) => {
    return [
    `/api/missions/assigned-assets/assets/${missionId}`
    ] as const;
    }

    
export const getGetAssignedAssetsByMissionIdQueryOptions = <TData = Awaited<ReturnType<typeof getAssignedAssetsByMissionId>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(missionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssignedAssetsByMissionId>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAssignedAssetsByMissionIdQueryKey(missionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssignedAssetsByMissionId>>> = ({ signal }) => getAssignedAssetsByMissionId(missionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(missionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAssignedAssetsByMissionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAssignedAssetsByMissionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getAssignedAssetsByMissionId>>>
export type GetAssignedAssetsByMissionIdQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useGetAssignedAssetsByMissionId<TData = Awaited<ReturnType<typeof getAssignedAssetsByMissionId>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 missionId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssignedAssetsByMissionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssignedAssetsByMissionId>>,
          TError,
          Awaited<ReturnType<typeof getAssignedAssetsByMissionId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAssignedAssetsByMissionId<TData = Awaited<ReturnType<typeof getAssignedAssetsByMissionId>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 missionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssignedAssetsByMissionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssignedAssetsByMissionId>>,
          TError,
          Awaited<ReturnType<typeof getAssignedAssetsByMissionId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAssignedAssetsByMissionId<TData = Awaited<ReturnType<typeof getAssignedAssetsByMissionId>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 missionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssignedAssetsByMissionId>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all assets assigned to a specific mission
 */

export function useGetAssignedAssetsByMissionId<TData = Awaited<ReturnType<typeof getAssignedAssetsByMissionId>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 missionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssignedAssetsByMissionId>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAssignedAssetsByMissionIdQueryOptions(missionId,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete a specific mission log by its ID
 */
export const deleteMissionLog = (
    missionId: number,
    logId: number,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/missions/${missionId}/logs/${logId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMissionLogMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMissionLog>>, TError,{missionId: number;logId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMissionLog>>, TError,{missionId: number;logId: number}, TContext> => {

const mutationKey = ['deleteMissionLog'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMissionLog>>, {missionId: number;logId: number}> = (props) => {
          const {missionId,logId} = props ?? {};

          return  deleteMissionLog(missionId,logId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMissionLogMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMissionLog>>>
    
    export type DeleteMissionLogMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Delete a specific mission log by its ID
 */
export const useDeleteMissionLog = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMissionLog>>, TError,{missionId: number;logId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteMissionLog>>,
        TError,
        {missionId: number;logId: number},
        TContext
      > => {

      const mutationOptions = getDeleteMissionLogMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
