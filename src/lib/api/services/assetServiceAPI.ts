/**
 * Generated by orval v7.13.1 üç∫
 * Do not edit manually.
 * Asset Service API
 * API documentation for the Asset Service
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { axiosInstance } from '../axiosInstance';
export type AssetRequestType = typeof AssetRequestType[keyof typeof AssetRequestType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AssetRequestType = {
  SHIP: 'SHIP',
  SUBMARINE: 'SUBMARINE',
  AIRCRAFT: 'AIRCRAFT',
  DRONE: 'DRONE',
  GROUND_VEHICLE: 'GROUND_VEHICLE',
} as const;

export type AssetRequestStatus = typeof AssetRequestStatus[keyof typeof AssetRequestStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AssetRequestStatus = {
  ACTIVE: 'ACTIVE',
  MAINTENANCE: 'MAINTENANCE',
  INACTIVE: 'INACTIVE',
} as const;

export interface AssetRequest {
  /** @minLength 1 */
  name: string;
  type: AssetRequestType;
  status: AssetRequestStatus;
  /**
   * @minimum -180
   * @maximum 180
   */
  longitude: number;
  /**
   * @minimum -90
   * @maximum 90
   */
  latitude: number;
}

export interface ErrorResponse {
  status?: number;
  error?: string;
  message?: string;
  data?: unknown;
  timestamp?: string;
}

export type AssetResponseType = typeof AssetResponseType[keyof typeof AssetResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AssetResponseType = {
  SHIP: 'SHIP',
  SUBMARINE: 'SUBMARINE',
  AIRCRAFT: 'AIRCRAFT',
  DRONE: 'DRONE',
  GROUND_VEHICLE: 'GROUND_VEHICLE',
} as const;

export type AssetResponseStatus = typeof AssetResponseStatus[keyof typeof AssetResponseStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AssetResponseStatus = {
  ACTIVE: 'ACTIVE',
  MAINTENANCE: 'MAINTENANCE',
  INACTIVE: 'INACTIVE',
} as const;

export interface AssetResponse {
  id?: string;
  name?: string;
  type?: AssetResponseType;
  status?: AssetResponseStatus;
  longitude?: number;
  latitude?: number;
  createdAt?: string;
  updatedAt?: string;
}

export interface AssetLocationResponse {
  id?: number;
  assetId?: string;
  longitude?: number;
  latitude?: number;
  timestamp?: string;
}

export type GetAssetLocationsParams = {
max?: number;
};

export type GetAssetsByIdsParams = {
ids: string;
};

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Get an asset by ID
 */
export const getAssetById = (
    id: string,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<AssetResponse>(
      {url: `/api/assets/${id}`, method: 'GET', signal
    },
      options);
    }
  



export const getGetAssetByIdQueryKey = (id?: string,) => {
    return [
    `/api/assets/${id}`
    ] as const;
    }

    
export const getGetAssetByIdQueryOptions = <TData = Awaited<ReturnType<typeof getAssetById>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetById>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAssetByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssetById>>> = ({ signal }) => getAssetById(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAssetById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAssetByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getAssetById>>>
export type GetAssetByIdQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useGetAssetById<TData = Awaited<ReturnType<typeof getAssetById>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetById>>,
          TError,
          Awaited<ReturnType<typeof getAssetById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAssetById<TData = Awaited<ReturnType<typeof getAssetById>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetById>>,
          TError,
          Awaited<ReturnType<typeof getAssetById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAssetById<TData = Awaited<ReturnType<typeof getAssetById>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetById>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get an asset by ID
 */

export function useGetAssetById<TData = Awaited<ReturnType<typeof getAssetById>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetById>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAssetByIdQueryOptions(id,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update an existing asset
 */
export const updateAsset = (
    id: string,
    assetRequest: AssetRequest,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<AssetResponse>(
      {url: `/api/assets/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: assetRequest
    },
      options);
    }
  


export const getUpdateAssetMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAsset>>, TError,{id: string;data: AssetRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateAsset>>, TError,{id: string;data: AssetRequest}, TContext> => {

const mutationKey = ['updateAsset'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateAsset>>, {id: string;data: AssetRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  updateAsset(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateAssetMutationResult = NonNullable<Awaited<ReturnType<typeof updateAsset>>>
    export type UpdateAssetMutationBody = AssetRequest
    export type UpdateAssetMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Update an existing asset
 */
export const useUpdateAsset = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAsset>>, TError,{id: string;data: AssetRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateAsset>>,
        TError,
        {id: string;data: AssetRequest},
        TContext
      > => {

      const mutationOptions = getUpdateAssetMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary Delete an asset by ID
 */
export const deleteAsset = (
    id: string,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<void>(
      {url: `/api/assets/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteAssetMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAsset>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAsset>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteAsset'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAsset>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteAsset(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAssetMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAsset>>>
    
    export type DeleteAssetMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Delete an asset by ID
 */
export const useDeleteAsset = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAsset>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAsset>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteAssetMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary Get all assets
 */
export const getAllAssets = (
    
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<AssetResponse[]>(
      {url: `/api/assets`, method: 'GET', signal
    },
      options);
    }
  



export const getGetAllAssetsQueryKey = () => {
    return [
    `/api/assets`
    ] as const;
    }

    
export const getGetAllAssetsQueryOptions = <TData = Awaited<ReturnType<typeof getAllAssets>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAssets>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllAssetsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllAssets>>> = ({ signal }) => getAllAssets(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllAssets>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllAssetsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllAssets>>>
export type GetAllAssetsQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useGetAllAssets<TData = Awaited<ReturnType<typeof getAllAssets>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAssets>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllAssets>>,
          TError,
          Awaited<ReturnType<typeof getAllAssets>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllAssets<TData = Awaited<ReturnType<typeof getAllAssets>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAssets>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllAssets>>,
          TError,
          Awaited<ReturnType<typeof getAllAssets>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllAssets<TData = Awaited<ReturnType<typeof getAllAssets>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAssets>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all assets
 */

export function useGetAllAssets<TData = Awaited<ReturnType<typeof getAllAssets>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAssets>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllAssetsQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new asset
 */
export const createAsset = (
    assetRequest: AssetRequest,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<AssetResponse>(
      {url: `/api/assets`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: assetRequest, signal
    },
      options);
    }
  


export const getCreateAssetMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAsset>>, TError,{data: AssetRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createAsset>>, TError,{data: AssetRequest}, TContext> => {

const mutationKey = ['createAsset'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createAsset>>, {data: AssetRequest}> = (props) => {
          const {data} = props ?? {};

          return  createAsset(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateAssetMutationResult = NonNullable<Awaited<ReturnType<typeof createAsset>>>
    export type CreateAssetMutationBody = AssetRequest
    export type CreateAssetMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Create a new asset
 */
export const useCreateAsset = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAsset>>, TError,{data: AssetRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createAsset>>,
        TError,
        {data: AssetRequest},
        TContext
      > => {

      const mutationOptions = getCreateAssetMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary Get asset location history by asset ID
 */
export const getAssetLocations = (
    id: string,
    params?: GetAssetLocationsParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<AssetLocationResponse[]>(
      {url: `/api/assets/${id}/locations`, method: 'GET',
        params, signal
    },
      options);
    }
  



export const getGetAssetLocationsQueryKey = (id?: string,
    params?: GetAssetLocationsParams,) => {
    return [
    `/api/assets/${id}/locations`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getGetAssetLocationsQueryOptions = <TData = Awaited<ReturnType<typeof getAssetLocations>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(id: string,
    params?: GetAssetLocationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetLocations>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAssetLocationsQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssetLocations>>> = ({ signal }) => getAssetLocations(id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAssetLocations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAssetLocationsQueryResult = NonNullable<Awaited<ReturnType<typeof getAssetLocations>>>
export type GetAssetLocationsQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useGetAssetLocations<TData = Awaited<ReturnType<typeof getAssetLocations>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 id: string,
    params: undefined |  GetAssetLocationsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetLocations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetLocations>>,
          TError,
          Awaited<ReturnType<typeof getAssetLocations>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAssetLocations<TData = Awaited<ReturnType<typeof getAssetLocations>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 id: string,
    params?: GetAssetLocationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetLocations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetLocations>>,
          TError,
          Awaited<ReturnType<typeof getAssetLocations>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAssetLocations<TData = Awaited<ReturnType<typeof getAssetLocations>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 id: string,
    params?: GetAssetLocationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetLocations>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get asset location history by asset ID
 */

export function useGetAssetLocations<TData = Awaited<ReturnType<typeof getAssetLocations>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 id: string,
    params?: GetAssetLocationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetLocations>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAssetLocationsQueryOptions(id,params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get assets by a list of IDs
 */
export const getAssetsByIds = (
    params: GetAssetsByIdsParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<AssetResponse[]>(
      {url: `/api/assets/ids`, method: 'GET',
        params, signal
    },
      options);
    }
  



export const getGetAssetsByIdsQueryKey = (params?: GetAssetsByIdsParams,) => {
    return [
    `/api/assets/ids`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getGetAssetsByIdsQueryOptions = <TData = Awaited<ReturnType<typeof getAssetsByIds>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(params: GetAssetsByIdsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetsByIds>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAssetsByIdsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssetsByIds>>> = ({ signal }) => getAssetsByIds(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAssetsByIds>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAssetsByIdsQueryResult = NonNullable<Awaited<ReturnType<typeof getAssetsByIds>>>
export type GetAssetsByIdsQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useGetAssetsByIds<TData = Awaited<ReturnType<typeof getAssetsByIds>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: GetAssetsByIdsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetsByIds>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetsByIds>>,
          TError,
          Awaited<ReturnType<typeof getAssetsByIds>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAssetsByIds<TData = Awaited<ReturnType<typeof getAssetsByIds>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: GetAssetsByIdsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetsByIds>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetsByIds>>,
          TError,
          Awaited<ReturnType<typeof getAssetsByIds>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAssetsByIds<TData = Awaited<ReturnType<typeof getAssetsByIds>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: GetAssetsByIdsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetsByIds>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get assets by a list of IDs
 */

export function useGetAssetsByIds<TData = Awaited<ReturnType<typeof getAssetsByIds>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: GetAssetsByIdsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetsByIds>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAssetsByIdsQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get count of all assets
 */
export const getAssetCount = (
    
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<number>(
      {url: `/api/assets/count`, method: 'GET', signal
    },
      options);
    }
  



export const getGetAssetCountQueryKey = () => {
    return [
    `/api/assets/count`
    ] as const;
    }

    
export const getGetAssetCountQueryOptions = <TData = Awaited<ReturnType<typeof getAssetCount>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetCount>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAssetCountQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssetCount>>> = ({ signal }) => getAssetCount(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAssetCount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAssetCountQueryResult = NonNullable<Awaited<ReturnType<typeof getAssetCount>>>
export type GetAssetCountQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useGetAssetCount<TData = Awaited<ReturnType<typeof getAssetCount>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetCount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetCount>>,
          TError,
          Awaited<ReturnType<typeof getAssetCount>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAssetCount<TData = Awaited<ReturnType<typeof getAssetCount>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetCount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetCount>>,
          TError,
          Awaited<ReturnType<typeof getAssetCount>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAssetCount<TData = Awaited<ReturnType<typeof getAssetCount>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetCount>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get count of all assets
 */

export function useGetAssetCount<TData = Awaited<ReturnType<typeof getAssetCount>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetCount>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAssetCountQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}
